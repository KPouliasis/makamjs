%extend tuple.

map : [A B C D] (A -> C -> prop) -> (B -> D -> prop) -> A * B -> C * D -> prop.
map P Q (X, Y) (X', Y') <- P X X', Q Y Y'.

dynlist : A -> list dyn -> prop.
dynlist Res [dyn Res]
  when unless (typ.isunif Res) (not(typ.eq Res (_ : A * B))).
dynlist (HD, TL) Result <-
  dynlist TL TL', eq Result (dyn HD :: TL').

%end.
